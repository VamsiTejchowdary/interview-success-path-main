import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load both .env and .env.local files
dotenv.config();
dotenv.config({ path: '.env.local' });

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2023-10-16' });
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

// Test webhook endpoint URL
const WEBHOOK_URL = process.env.NODE_ENV === 'production' 
  ? 'https://interview-success-path-dev.vercel.app/api/stripe-webhook'
  : 'http://localhost:3000/api/stripe-webhook';

async function testWebhookEvent(eventType, eventData) {
  try {
    console.log(`\nüß™ Testing webhook event: ${eventType}`);
    
    // Create a mock event
    const event = {
      id: `evt_test_${Date.now()}`,
      object: 'event',
      api_version: '2023-10-16',
      created: Math.floor(Date.now() / 1000),
      data: {
        object: eventData
      },
      livemode: false,
      pending_webhooks: 1,
      request: {
        id: `req_test_${Date.now()}`,
        idempotency_key: null
      },
      type: eventType
    };

    // Send to webhook endpoint
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Stripe-Signature': 'test_signature' // In real scenario, this would be generated by Stripe
      },
      body: JSON.stringify(event)
    });

    if (response.ok) {
      console.log(`‚úÖ ${eventType} webhook processed successfully`);
      return true;
    } else {
      const error = await response.text();
      console.log(`‚ùå ${eventType} webhook failed:`, error);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Error testing ${eventType} webhook:`, error.message);
    return false;
  }
}

async function getTestUser() {
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('user_id, email, stripe_customer_id')
      .eq('is_paid', true)
      .limit(1);

    if (error || !users || users.length === 0) {
      console.log('‚ùå No paid users found for testing');
      return null;
    }

    return users[0];
  } catch (error) {
    console.log('‚ùå Error getting test user:', error.message);
    return null;
  }
}

async function createTestSubscription(user) {
  try {
    console.log(`\nüìù Creating test subscription for user: ${user.email}`);
    
    // Create a test customer if not exists
    let customerId = user.stripe_customer_id;
    if (!customerId) {
      const customer = await stripe.customers.create({
        email: user.email,
        name: `Test User ${user.user_id.slice(0, 8)}`
      });
      customerId = customer.id;
      
      // Update user with customer ID
      await supabase
        .from('users')
        .update({ stripe_customer_id: customerId })
        .eq('user_id', user.user_id);
    }

    // Create a test price
    const price = await stripe.prices.create({
      unit_amount: 1500, // $15.00
      currency: 'usd',
      recurring: { interval: 'month' },
      product_data: {
        name: 'Test Premium Plan'
      }
    });

    // Create a test subscription
    const subscription = await stripe.subscriptions.create({
      customer: customerId,
      items: [{ price: price.id }],
      payment_behavior: 'default_incomplete',
      payment_settings: { save_default_payment_method: 'on_subscription' },
      expand: ['latest_invoice.payment_intent']
    });

    console.log(`‚úÖ Test subscription created: ${subscription.id}`);
    return subscription;
  } catch (error) {
    console.log('‚ùå Error creating test subscription:', error.message);
    return null;
  }
}

async function testSubscriptionLifecycle() {
  console.log('üöÄ Starting webhook testing...');
  
  // Get a test user
  const user = await getTestUser();
  if (!user) {
    console.log('‚ùå No test user available. Please ensure you have at least one paid user.');
    return;
  }

  console.log(`üë§ Using test user: ${user.email}`);

  // Create a test subscription
  const subscription = await createTestSubscription(user);
  if (!subscription) {
    console.log('‚ùå Failed to create test subscription');
    return;
  }

  // Test subscription.created event
  await testWebhookEvent('customer.subscription.created', subscription);

  // Test invoice.payment_succeeded event
  const invoice = {
    id: `in_test_${Date.now()}`,
    object: 'invoice',
    amount_paid: 1500,
    currency: 'usd',
    customer: subscription.customer,
    subscription: subscription.id,
    payment_intent: `pi_test_${Date.now()}`,
    billing_reason: 'subscription_cycle',
    status: 'paid'
  };
  await testWebhookEvent('invoice.payment_succeeded', invoice);

  // Test subscription.updated event (simulate renewal)
  const updatedSubscription = {
    ...subscription,
    current_period_start: Math.floor(Date.now() / 1000),
    current_period_end: Math.floor((Date.now() + 30 * 24 * 60 * 60 * 1000) / 1000), // 30 days from now
    status: 'active'
  };
  await testWebhookEvent('customer.subscription.updated', updatedSubscription);

  // Test invoice.upcoming event
  const upcomingInvoice = {
    id: `in_upcoming_${Date.now()}`,
    object: 'invoice',
    amount_due: 1500,
    currency: 'usd',
    customer: subscription.customer,
    subscription: subscription.id,
    billing_reason: 'subscription_cycle',
    status: 'open'
  };
  await testWebhookEvent('invoice.upcoming', upcomingInvoice);

  console.log('\n‚úÖ Webhook testing completed!');
  console.log('\nüìä Check your database tables to see the updates:');
  console.log('- users table: is_paid, next_billing_at, status');
  console.log('- subscriptions table: subscription records');
  console.log('- payments table: payment records');
  console.log('- subscription_events table: webhook event logs');
}

async function testPaymentFailure() {
  console.log('\nüß™ Testing payment failure scenario...');
  
  const user = await getTestUser();
  if (!user) return;

  const failedInvoice = {
    id: `in_failed_${Date.now()}`,
    object: 'invoice',
    amount_due: 1500,
    currency: 'usd',
    customer: user.stripe_customer_id,
    subscription: 'sub_test_failed',
    payment_intent: `pi_failed_${Date.now()}`,
    billing_reason: 'subscription_cycle',
    status: 'open'
  };

  await testWebhookEvent('invoice.payment_failed', failedInvoice);
}

async function testSubscriptionCancellation() {
  console.log('\nüß™ Testing subscription cancellation...');
  
  const user = await getTestUser();
  if (!user) return;

  const canceledSubscription = {
    id: 'sub_test_canceled',
    object: 'subscription',
    customer: user.stripe_customer_id,
    status: 'canceled',
    current_period_start: Math.floor(Date.now() / 1000),
    current_period_end: Math.floor((Date.now() + 30 * 24 * 60 * 60 * 1000) / 1000),
    cancel_at_period_end: true,
    canceled_at: Math.floor(Date.now() / 1000)
  };

  await testWebhookEvent('customer.subscription.deleted', canceledSubscription);
}

// Main execution
async function main() {
  const args = process.argv.slice(2);
  
  switch (args[0]) {
    case 'lifecycle':
      await testSubscriptionLifecycle();
      break;
    case 'failure':
      await testPaymentFailure();
      break;
    case 'cancellation':
      await testSubscriptionCancellation();
      break;
    case 'all':
      await testSubscriptionLifecycle();
      await testPaymentFailure();
      await testSubscriptionCancellation();
      break;
    default:
      console.log('Usage: node test-webhooks.js [lifecycle|failure|cancellation|all]');
      console.log('\nCommands:');
      console.log('  lifecycle    - Test complete subscription lifecycle');
      console.log('  failure      - Test payment failure scenario');
      console.log('  cancellation - Test subscription cancellation');
      console.log('  all          - Run all tests');
  }
}

main().catch(console.error); 